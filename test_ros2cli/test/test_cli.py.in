# Copyright 2019 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import sys

import unittest

from launch import LaunchDescription
from launch.actions import ExecuteProcess
from launch.actions import OpaqueFunction
from launch.actions import TimerAction
from launch.substitutions import LaunchConfiguration

import launch_testing
import launch_testing.asserts
import launch_testing.util

sys.path.append(os.path.dirname(__file__))

from @TEST_CONFIG_MODULE@ import test_configurations  # noqa


@launch_testing.parametrize('test_configuration', test_configurations)
def generate_test_description(test_configuration, ready_fn):
    cmd = ['ros2', test_configuration.command]
    cmd.extend(test_configuration.arguments)
    command_under_test = ExecuteProcess(
        cmd=cmd,
        name='cli',
        output='screen',
        sigterm_timeout=LaunchConfiguration(
            'sigterm_timeout', default=60
        )
    )
    actions = [command_under_test]
    actions.append(
        OpaqueFunction(function=lambda context: ready_fn())
    )
    launch_description = LaunchDescription([
        *test_configuration.fixture_actions,
        TimerAction(
            period=@TEST_SETUP_DELAY@,
            actions=actions,
        )
    ])
    return launch_description, locals()


class TestCommandFinishesInAFiniteAmountOfTime(unittest.TestCase):

    def @TEST_NAME@(self, proc_info, command_under_test, test_configuration):
        """Test that the command under test finished in a finite amount of time."""
        success = proc_info.waitForShutdown(
            process=command_under_test, timeout=test_configuration.timeout
        )
        if test_configuration.self_terminates:
            assert success, "Timed out waiting for process '{}' to finish".format(
                command_under_test
            )


@launch_testing.post_shutdown_test()
class TestCommandOutput(unittest.TestCase):

    def @TEST_NAME@(self, proc_info, proc_output, command_under_test, test_configuration):
        """Test that the command under test finished cleanly."""
        launch_testing.asserts.assertExitCodes(
            proc_info,
            test_configuration.exit_codes,
            command_under_test
        )
        processes_expected_output = test_configuration.expected_output
        if not isinstance(processes_expected_output, dict):
            processes_expected_output = {'cli': processes_expected_output}
        for process_name, expected_output in processes_expected_output.items():
            if expected_output is not None:
                process = launch_testing.util.resolveProcesses(
                    info_obj=proc_output, process=process_name
                )[0]

                process_output_lines = ''.join(
                    output.text.decode()
                    for output in proc_output[process]
                    if output.from_stdout
                ).splitlines()

                if not callable(expected_output):
                    output_lines_n_patterns = list(zip(process_output_lines, expected_output))
                    assert len(output_lines_n_patterns) == len(process_output_lines)
                    for line, pattern in output_lines_n_patterns:
                        if callable(pattern):
                            assert pattern(line)
                        elif hasattr(pattern, 'match'):
                            if pattern.match(line) is None:
                                raise RuntimeError(str(pattern) + ' in ' + line)
                            assert pattern.match(line) is not None
                        else:
                            assert pattern in line
                else:
                    assert expected_output(process_output_lines)
            else:
                with self.assertRaises(launch_testing.util.NoMatchingProcessException):
                    launch_testing.util.resolveProcesses(
                        info_obj=proc_output,
                        process=process_name
                    )
